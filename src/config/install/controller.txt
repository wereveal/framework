<?php
/**
 * @brief     {controller_name} Controller for {APPNAME}.
 * @ingroup   {app_name}_controllers
 * @file      {NAMESPACE}/{APPNAME}/Controllers/{controller_name}Controller.php
 * @namespace {NAMESPACE}\{APPNAME}\Controllers
 * @author    {author} {email}
 * @version   1.0.0-alpha.0
 * @date      {idate}
 * @note Change Log
 * - v1.0.0-alpha.0 - Initial version        - {sdate} {sauthor}
 * @todo {NAMESPACE}/{APPNAME}/Controllers/{controller_name}Controller.php - Everything
 */
namespace {NAMESPACE}\{APPNAME}\Controllers;

use Ritc\Library\Controllers\LibraryController;
use Ritc\Library\Interfaces\ControllerInterface;
use Ritc\Library\Services\Di;
use Ritc\Library\Traits\ControllerTraits;
use Ritc\Library\Traits\LogitTraits;

/**
 * Class {controller_name}Controller.
 * @class   {controller_name}Controller
 * @package {NAMESPACE}\{APPNAME}
 */
class {controller_name}Controller implements ControllerInterface
{
    use ControllerTraits, LogitTraits;

    /**
     * {controller_name}Controller constructor.
     * @param \Ritc\Library\Services\Di $o_di
     */
    public function __construct(Di $o_di)
    {
        $this->setupController($o_di);
        $this->setupElog($o_di);
    }

    /**
     * Main Router and Puker outer (more descriptive method name).
     * Turns over the hard work to the specific controllers specified by the router.
     * @return string
     */
    public function route()
    {
        // TODO: Implement route() method.
        $a_router_parts = $this->o_router->getRouteParts();

        $route_class = $a_router_parts['route_class'] != ''
            ? $a_router_parts['route_class']
            : 'HomeController';
        $route_method = $a_router_parts['route_method'] != ''
            ? $a_router_parts['route_method']
            : 'route';

        switch ($route_class) {
            case 'LibraryController':
                $o_controller = new LibraryController($this->o_di);
                break;
            case 'ManagerController':
                $o_controller = new ManagerController($this->o_di);
                break;
            case 'HomeController':
                $o_controller = new HomeController($this->o_di);
                break;
            default:
                $o_controller = new $route_class($this->o_di);
        }
        return $o_controller->$route_method();
    }
}
